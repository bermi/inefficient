// WARNING, don't expose this middleware on live/production endpoints or
// you'll risk bringing your servers down or increasing your cloud bill

const {totalmem, freemem} = require('os');

// connect style middleware for node.js that will artificially consume memory
// and CPU based on the requested memory parameters
module.exports = (req, res) => {
  const {
    // Set to `true` go free up leaked memory.
    unleakMemory = "false",
    // Defines the amount of RAM to leak on every call until the limit
    // determined by the `memory` parameter.
    mbPerCall = 1,
    // The maximum memory to leak.
    memory = 800,
    // Defines the number of chunks to take from the memory leaked array to
    // marshal/unmarshal to generate CPU load.
    // A large `mbPerCall` and `cpu` results in long CPU blocking times
    // and slower response times.
    // No CPU load will be generated by default
    cpu = 0,
  } = req.query || {};

  // We'll keep memory consuming objects between requests to avoid garbage
  // collection from freeing up the memory
  global._memoryLeaker = global._memoryLeaker || [];

  if (unleakMemory === "true") {
    global._memoryLeaker = [];
  }

  const currentMemory = Math.ceil(
      process.memoryUsage().heapUsed / 1024 / 1024
  );

  // Once the URL query parameter memory=800 is reached we'll stop
  // leaking memory
  if (+memory > currentMemory) {
    global._memoryLeaker.push(
        // Adding 1MB worth of text for each 40000 chars per call
        Array(40000 * mbPerCall).fill('inefficient memory leaker')
    );
  }

  // CPU/blocking operation, set cpu=1 to use only one chunk of
  // data from the memory loading array, add more to have longer
  // ttfb responses, increase it to 1000 to crash node or bring response
  // times to a halt
  if (+cpu > 0) {
    JSON.parse(JSON.stringify(global._memoryLeaker.slice(0, +cpu)));
  }

  res.writeHead(200, {'Content-Type': 'application/json'});
  res.end(JSON.stringify({
    currentMemory,
    totalMemory: Math.ceil(totalmem() / 1024 / 1024),
    freeMemory: Math.ceil(freemem() / 1024 / 1024),
  }));
};
